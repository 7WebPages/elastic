1. pip install git+https://github.com/liberation/django_elasticsearch.git
2. add new model subclassed from EsIndexable
3. in case you want all models to be added to index authomatically - add
ELASTICSEARCH_AUTO_INDEX = True
to the settings.

after you add some models to index - you're able to search via
YourModel.es.search

in case you've added facets/completition fields to the Elasticsearch property of
the model - you're able to have facets and autocomplete:

class Elasticsearch(EsIndexable.Elasticsearch):
        facets_fields = ['year_in_school', 'age']
        completion_fields = ['name']


facets example:

MyModel.es.search('').facet(['age', 'year_in_school']).facets

Out[1]:
{u'age': {u'buckets': [{u'doc_count': 4, u'key': 19},
   {u'doc_count': 1, u'key': 18}],
  u'doc_count_error_upper_bound': 0,
  u'sum_other_doc_count': 0},
 u'doc_count': 5,
 u'year_in_school': {u'buckets': [{u'doc_count': 2, u'key': u'fr'},
   {u'doc_count': 2, u'key': u'so'},
   {u'doc_count': 1, u'key': u'sl'}],
  u'doc_count_error_upper_bound': 0,
  u'sum_other_doc_count': 0}}


In [2]: MyModel.es.search('FR', fuzziness=2).facet(['age']).facets

Out[2]:
{u'age': {u'buckets': [{u'doc_count': 4, u'key': 19},
   {u'doc_count': 1, u'key': 18}],
  u'doc_count_error_upper_bound': 0,
  u'sum_other_doc_count': 0},
 u'doc_count': 5}

In [3]: MyModel.es.complete('name', 'pa')
Converted retries value: False -> Retry(total=False, connect=None, read=None, redirect=0)
"POST /django/_suggest HTTP/1.1" 200 179
POST http://localhost:9200/django/_suggest [status:200 request:0.006s]
> {"name_complete": {"completion": {"field": "name_complete", "fuzzy": {}}, "text": "pa"}}
< {"_shards":{"total":5,"successful":5,"failed":0},"name_complete":[{"text":"pa","offset":0,"length":2,"options":[{"text":"papanov","score":1.0},{"text":"paparazzi","score":1.0}]}]}
Out[3]: [u'papanov', u'paparazzi']


Забавный момент: когда переименовываешь (или удаляешь) модельку - старый индекс остается.
Это как-бы и плюс и минус: с одной стороны - не происходит расхождения и остановки поиска,
с другой - повышается запутанность если использовать старое название. Или забывается
место в памяти или на диске (если переходишь на новый индекс, но забыл про старый).
В общем, это стоит иметь в виду.


Также из минусов стоит отметить как хендлятся foreignkey:
"university": {
    "id": 1,
    "value": "University object"
}
и это при том, что у университета есть имя.
С моей точки зрения, elasticsearch - это для скорости поиска, в то же время подобное
решение эмулирует типа таблички, с типа джойнов. Это приведет к падению скорости при запросах типа
.filter('university.name'='KNU')


Рассмотрим теперь как эта аппликаха работает с m2m (к примеру, теги).

добавив новое m2m-поле courses мы получаем в маппинге

courses": {
    "type": "object"
}

И вот так выглядит, в результате, студент с определенным университетом и курсами:

"university":
    {
        "id": 1,
        "value": "University object"
    },
"courses":
    [
        {
            "id": 1,
            "value": "Course object"
        },
        {
            "id": 2,
            "value": "Course object"
        }
    ],


Попробуем описать правильный маппинг:
сlass Elasticsearch(EsIndexable.Elasticsearch):
    mappings = {
        "university": {
            "type": "object",
            "properties": {
                "name": {"type": "string"},
            }
        }
    }

После того как ребилданул индекс через Student.es.flush()
все еще наблюдаю все ту же пару id-value. Печаль. я хочу nested objects.
Пометка: даже если поменять тип на nested - все равно та же лажа (хотя в маппинге name появился)
Судя по всему, там сериалайзер не совсем правильно работает

Почитал их тесты - нет протестированного нестинга, есть только тест на рекурсивный foreignkey (на self)
https://github.com/liberation/django-elasticsearch/blob/master/django_elasticsearch/tests/test_serializer.py
В принципе, потом пожно будет дописать.

Но, имхо, в большинстве случаев этот уровень абстракции вносит больше сложностей чем полезностей.
и да, оно по какой-то загдочной причине вместо того чтобы пихать джанговскую айдишку в _id
пихает ее в id